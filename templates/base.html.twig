<!DOCTYPE html>
<html>
    <head>
        <meta charset="UTF-8">
        <title>{% block title %}Zenith{% endblock %}</title>
        <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 128 128'><rect width='128' height='128' rx='16' fill='%23203a5c'/><text x='50%' y='58%' dominant-baseline='middle' text-anchor='middle' font-size='56' fill='%23ffffff' font-family='Arial, sans-serif'>Z</text></svg>">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
        {% block stylesheets %}
            <style>
                body {
                    font-family: 'Inter', 'Segoe UI', sans-serif;
                    background: radial-gradient(120% 120% at 50% 0%, #27304a 0%, #141827 55%, #0a0f1c 100%);
                    color: #e2e8f0;
                }

                a {
                    color: #8ab4ff;
                }

                a:hover {
                    color: #c6dcff;
                }

                .navbar {
                    background: linear-gradient(120deg, rgba(25, 32, 52, 0.92), rgba(9, 12, 26, 0.98)) !important;
                    border-bottom: 1px solid rgba(99, 112, 140, 0.35);
                }

                .navbar .navbar-brand,
                .navbar .nav-link,
                .navbar .text-white-50 {
                    color: #e2e8f0 !important;
                }

                .navbar .btn-outline-light {
                    color: #e2e8f0;
                    border-color: rgba(148, 163, 184, 0.5);
                }

                .navbar .btn-outline-light:hover {
                    background: rgba(148, 163, 184, 0.2);
                }

                .alert {
                    background: rgba(51, 65, 85, 0.35);
                    border: 1px solid rgba(94, 106, 131, 0.45);
                    color: #f8fafc;
                }

                .alert-danger {
                    background: rgba(148, 44, 81, 0.25);
                    border-color: rgba(248, 113, 113, 0.35);
                }

                .alert-info {
                    background: rgba(30, 58, 138, 0.35);
                    border-color: rgba(96, 165, 250, 0.35);
                }

                .btn-surface {
                    background: rgba(79, 90, 120, 0.25);
                    border: 1px solid rgba(148, 163, 184, 0.35);
                    color: #e2e8f0;
                }

                .btn-surface:hover,
                .btn-surface:focus {
                    background: rgba(120, 135, 170, 0.35);
                    border-color: rgba(191, 210, 235, 0.45);
                    color: #f8fafc;
                }

                .btn-outline-light {
                    color: #e2e8f0;
                    border-color: rgba(148, 163, 184, 0.55);
                    background: rgba(148, 163, 184, 0.06);
                }

                .btn-outline-light:hover,
                .btn-outline-light:focus,
                .btn-outline-light:focus-visible {
                    color: #f8fafc;
                    border-color: rgba(191, 210, 235, 0.65);
                    background: rgba(148, 163, 184, 0.22);
                }

                .btn-primary {
                    background: linear-gradient(135deg, rgba(99, 102, 241, 0.9), rgba(56, 189, 248, 0.85));
                    border: 1px solid rgba(129, 140, 248, 0.5);
                    color: #f8fafc;
                }

                .btn-primary:hover {
                    background: linear-gradient(135deg, rgba(129, 140, 248, 0.95), rgba(96, 165, 250, 0.9));
                    border-color: rgba(168, 198, 255, 0.5);
                    color: #e2e8f0;
                }

                .btn-outline-secondary {
                    color: #cbd5f5;
                    border-color: rgba(148, 163, 184, 0.4);
                }

                .btn-outline-secondary:hover {
                    background: rgba(148, 163, 184, 0.18);
                    color: #e2e8f0;
                    border-color: rgba(191, 210, 235, 0.55);
                }

                .btn-outline-primary {
                    color: #8ab4ff;
                    border-color: rgba(138, 180, 255, 0.45);
                    background: rgba(138, 180, 255, 0.05);
                }

                .btn-outline-primary:hover,
                .btn-outline-primary:focus {
                    color: #dbeafe;
                    border-color: rgba(191, 219, 254, 0.65);
                    background: rgba(138, 180, 255, 0.15);
                }

                .btn-secondary {
                    background: rgba(71, 85, 105, 0.7);
                    border: 1px solid rgba(148, 163, 184, 0.35);
                    color: #e2e8f0;
                }

                .btn-secondary:hover {
                    background: rgba(100, 116, 139, 0.75);
                    border-color: rgba(174, 193, 218, 0.45);
                    color: #e2e8f0;
                }

                .bg-body-secondary {
                    background-color: rgba(24, 32, 50, 0.85) !important;
                    border: 1px solid rgba(99, 112, 140, 0.35) !important;
                    color: #e2e8f0 !important;
                }

                .auth-card {
                    background: rgba(17, 24, 39, 0.95);
                    border: 1px solid rgba(99, 112, 140, 0.35);
                    border-radius: 20px;
                    box-shadow: 0 32px 60px rgba(3, 7, 18, 0.65);
                    color: #e2e8f0;
                }

                .auth-card h1 {
                    color: #f8fafc;
                }

                .auth-container {
                    min-height: calc(100vh - 72px);
                    display: flex;
                    align-items: center;
                }

                .page-header-muted {
                    color: rgba(203, 213, 225, 0.75);
                }

                .modal-content {
                    background: rgba(17, 24, 39, 0.98);
                    border: 1px solid rgba(99, 112, 140, 0.35);
                    color: #e2e8f0;
                    box-shadow: 0 24px 48px rgba(4, 9, 18, 0.65);
                }

                .form-control,
                .form-select,
                .form-check-input {
                    background-color: rgba(30, 41, 59, 0.8);
                    border: 1px solid rgba(99, 112, 140, 0.35);
                    color: #f8fafc;
                    font-weight: 500;
                }

                .form-control::placeholder,
                .form-select::placeholder {
                    color: rgba(203, 213, 225, 0.6);
                    font-weight: 400;
                }

                .form-control:focus,
                .form-select:focus,
                .form-check-input:focus {
                    background-color: rgba(30, 41, 59, 0.95);
                    border-color: rgba(138, 180, 255, 0.65);
                    box-shadow: 0 0 0 0.25rem rgba(138, 180, 255, 0.15);
                    color: #f8fafc;
                }

                .form-check-input:checked {
                    background-color: rgba(138, 180, 255, 0.75);
                    border-color: rgba(138, 180, 255, 0.75);
                }

                .min-vh-100 {
                    min-height: 0 !important;
                }
            </style>
        {% endblock %}

        {% block javascripts %}
            <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
            <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
            <script>
                (function () {
                    const global = window;
                    const registry = [];
                    let pendingRun = false;

                    const scheduleRun = () => {
                        if (pendingRun) {
                            return;
                        }
                        pendingRun = true;
                        setTimeout(() => {
                            pendingRun = false;
                            const callbacks = registry.splice(0);
                            callbacks.forEach((callback) => {
                                try {
                                    callback();
                                } catch (error) {
                                    console.error('Zenith init failed', error);
                                }
                            });
                        }, 0);
                    };

                    const registerInit = (callback) => {
                        if (typeof callback !== 'function') {
                            return;
                        }
                        registry.push(callback);
                        if (document.readyState !== 'loading') {
                            scheduleRun();
                        }
                    };

                    const utils = {
                        async fetchJson(url, options = {}) {
                            const response = await fetch(url, {
                                headers: {
                                    'Content-Type': 'application/json',
                                    'Accept': 'application/json',
                                },
                                credentials: 'same-origin',
                                ...options,
                            });

                            if (!response.ok) {
                                let message = 'Wystąpił błąd.';
                                try {
                                    const payload = await response.json();
                                    message = payload.error ?? payload.message ?? message;
                                } catch (error) {
                                    /* ignore */
                                }
                                throw new Error(message);
                            }

                            if (response.status === 204) {
                                return null;
                            }

                            return response.json();
                        },

                        toggleLoading(button, spinner, isLoading) {
                            if (!button) {
                                return;
                            }
                            button.disabled = isLoading;
                            if (spinner) {
                                spinner.classList.toggle('d-none', !isLoading);
                            }
                        },

                        showError(element, message) {
                            if (!element) {
                                alert(message);
                                return;
                            }
                            element.textContent = message;
                            element.classList.remove('d-none');
                        },

                        hideError(element) {
                            if (!element) {
                                return;
                            }
                            element.textContent = '';
                            element.classList.add('d-none');
                        },

                        safeJsonParse(value) {
                            try {
                                return value ? JSON.parse(value) : null;
                            } catch (error) {
                                console.warn('Nie udało się sparsować JSON.', error);
                                return null;
                            }
                        },

                        parseDurationInput(rawValue) {
                            const value = String(rawValue ?? '').trim().toLowerCase();
                            if (value === '') {
                                return { minutes: null };
                            }
                            if (/^\d+$/.test(value)) {
                                const minutes = Number.parseInt(value, 10);
                                return { minutes: minutes > 0 ? minutes : null };
                            }
                            let totalMinutes = 0;
                            let matched = false;
                            const regex = /(\d+)\s*(h|m)/g;
                            let match;
                            while ((match = regex.exec(value)) !== null) {
                                matched = true;
                                const amount = Number.parseInt(match[1], 10);
                                if (match[2] === 'h') {
                                    totalMinutes += amount * 60;
                                } else {
                                    totalMinutes += amount;
                                }
                            }
                            if (matched) {
                                return { minutes: totalMinutes > 0 ? totalMinutes : null };
                            }
                            const colonMatch = value.match(/^(\d+):(\d{1,2})$/);
                            if (colonMatch) {
                                const hours = Number.parseInt(colonMatch[1], 10);
                                const minutes = Number.parseInt(colonMatch[2], 10);
                                const total = hours * 60 + minutes;
                                return { minutes: total > 0 ? total : null };
                            }
                            return { minutes: null, error: 'Nieprawidłowy format czasu. Użyj np. 2h 30m.' };
                        },

                        formatDuration(minutes) {
                            const numeric = Number(minutes);
                            if (!Number.isFinite(numeric) || numeric <= 0) {
                                return '';
                            }
                            const total = Math.round(numeric);
                            const hours = Math.floor(total / 60);
                            const mins = total % 60;
                            const parts = [];
                            if (hours) {
                                parts.push(`${hours}h`);
                            }
                            if (mins) {
                                parts.push(`${mins}m`);
                            }
                            return parts.length ? parts.join(' ') : `${total}m`;
                        },

                        formatDate(value) {
                            if (!value) {
                                return '';
                            }
                            const date = new Date(value);
                            return `${date.toLocaleDateString()} ${date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}`;
                        },

                        formatInputDate(value) {
                            const date = new Date(value);
                            const pad = (num) => String(num).padStart(2, '0');
                            return `${date.getFullYear()}-${pad(date.getMonth() + 1)}-${pad(date.getDate())}T${pad(date.getHours())}:${pad(date.getMinutes())}`;
                        },

                        escapeHtml(value) {
                            return String(value ?? '')
                                .replace(/&/g, '&amp;')
                                .replace(/</g, '&lt;')
                                .replace(/>/g, '&gt;')
                                .replace(/"/g, '&quot;')
                                .replace(/'/g, '&#039;');
                        },

                        getInitials(name) {
                            const text = String(name ?? '').trim();
                            if (!text) {
                                return '?';
                            }
                            const parts = text.split(/\s+/).slice(0, 3);
                            if (parts.length === 1) {
                                const chars = Array.from(parts[0] ?? '');
                                const first = (chars[0] ?? '').toUpperCase();
                                const second = (chars[1] ?? '').toUpperCase();
                                const combined = `${first}${second}`.trim();
                                return combined || first || '?';
                            }
                            const first = (parts[0]?.[0] ?? '').toUpperCase();
                            const last = (parts[parts.length - 1]?.[0] ?? '').toUpperCase();
                            const combined = `${first}${last}`.trim();
                            return combined || first || last || '?';
                        },
                    };

                    global.Zenith = global.Zenith || {};
                    global.Zenith.utils = utils;
                    global.Zenith.registerInit = registerInit;

                    if (global.Turbo) {
                        document.addEventListener('turbo:load', scheduleRun);
                    } else if (document.readyState === 'loading') {
                        document.addEventListener('DOMContentLoaded', scheduleRun);
                    } else {
                        scheduleRun();
                    }
                }());
            </script>
        {% endblock %}
    </head>
    <body class="bg-body-tertiary" style="min-height: 100vh; display: flex; flex-direction: column;">
        <nav class="navbar navbar-expand-lg navbar-dark bg-primary shadow-sm" style="flex: 0;">
            <div class="container-fluid">
                <a class="navbar-brand fw-semibold" href="{{ path('app_board_index') }}">Zenith</a>
                <div class="d-flex align-items-center gap-3">
                    {% if app.user %}
                        <span class="text-white-50 small">{{ app.user.displayName|default(app.user.userIdentifier) }}</span>
                        <a class="btn btn-sm btn-outline-light" href="{{ path('app_logout') }}">Wyloguj</a>
                    {% endif %}
                </div>
            </div>
        </nav>

        <main class="min-vh-100" style="display: flex; flex-direction: column; height: 100%; flex: 20;">
            {% for message in app.flashes('success') %}
                <div class="alert alert-success rounded-0 mb-0">{{ message }}</div>
            {% endfor %}
            {% for message in app.flashes('error') %}
                <div class="alert alert-danger rounded-0 mb-0">{{ message }}</div>
            {% endfor %}

            {% block body %}{% endblock %}
        </main>
    </body>
</html>
